import { cn } from "@/lib/utils";
import NotificationDropdown from './NotificationDropdown';
import { useContext, useState, useRef, useEffect } from "react";
import { Link, useLocation } from "react-router-dom";
import { AuthContext } from '@/contexts/authContext';
import { useTheme } from '@/hooks/useTheme';
import type { ThemeColors } from '@/hooks/useTheme';

export default function Header() {
  const { isAuthenticated, userRole, logout, userInfo } = useContext(AuthContext);
  const { 
    setThemeMode, 
    availableThemes, 
    lastPresetTheme,
    fontSize,
    setFontSizeMode,
    availableFontSizes,
    currentFontSizeConfig
  } = useTheme();
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isThemeMenuOpen, setIsThemeMenuOpen] = useState(false);
  const menuRef = useRef<HTMLDivElement>(null);
  const location = useLocation();
  
  // Close menu when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setIsMenuOpen(false);
      }
    };
    
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  
  // Role-specific navigation items
  const getNavItems = () => {
    switch(userRole) {
      case 'user':
            return [
             { label: '‰∏ªÈ°µ', path: '/', icon: 'üè†' },
             { label: 'Â§ßÂéÖ', path: '/lobby', icon: 'üè¢' },
             { label: 'ÊàëÁöÑËÆ¢Âçï', path: '/user/orders', icon: 'üìù' },
             { label: 'ÊàëÁöÑÊî∂Ëóè', path: '/user/favorites', icon: '‚ù§Ô∏è' },
           ];
      case 'player':
         return [
           { label: 'ÊúçÂä°ÁÆ°ÁêÜ', path: '/player/services', icon: '‚öôÔ∏è' },
           { label: 'ËÆ¢ÂçïÁÆ°ÁêÜ', path: '/player/orders', icon: 'üìù' },
           { label: 'ËµÑÈáëÊèêÁé∞', path: '/player/funds', icon: 'üí∞' },
           { label: 'Èô™Áé©ÊåáÂØº', path: '/player/guide', icon: 'üìã' },
         ];
           case 'admin':
              // Ê£ÄÊü•ÊòØÂê¶‰∏∫ÂÆ¢ÊúçÔºàauthority = 2Ôºâ
              if (userInfo && userInfo.authority === 2) {
                // ÂÆ¢ÊúçÂè™ËÉΩËÆøÈóÆËøô‰∫õÈ°µÈù¢ÔºåÂ±èËîΩÊèêÁé∞ÁÆ°ÁêÜ
                return [
                  { label: 'ËÆ¢ÂçïÁÆ°ÁêÜ', path: '/admin/orders', icon: 'üìã' },
                  { label: 'Áî®Êà∑/Èô™Áé©ÁÆ°ÁêÜ', path: '/admin/users', icon: 'üë•' },
                  { label: 'Á§ºÁâ©ÁÆ°ÁêÜ', path: '/admin/gifts', icon: 'üéÅ' },
                  { label: '‰∏ä‰∏ãÁè≠ÊâìÂç°', path: '/admin/attendance', icon: '‚è∞' },
                  { label: 'Êî∂ÁõäÊèêÁé∞', path: '/admin/customer-service-funds', icon: 'üí∞' },
                ];
              } else {
                // Ë∂ÖÁ∫ßÁÆ°ÁêÜÂëòÂíåËÇ°‰∏úÂèØ‰ª•ËÆøÈóÆÊâÄÊúâÈ°µÈù¢
                return [
                  { label: 'Êï∞ÊçÆÊ¶ÇËßà', path: '/admin/overview', icon: 'üìä' },
                  { label: 'ËÆ¢ÂçïÁÆ°ÁêÜ', path: '/admin/orders', icon: 'üìã' },
                  { label: 'Áî®Êà∑/Èô™Áé©ÁÆ°ÁêÜ', path: '/admin/users', icon: 'üë•' },
                  { label: 'Á§ºÁâ©ÁÆ°ÁêÜ', path: '/admin/gifts', icon: 'üéÅ' },
                  { label: 'Ê∏∏ÊàèÁÆ°ÁêÜ', path: '/admin/games', icon: 'üéÆ' },
                  { label: 'ÊèêÁé∞ÁÆ°ÁêÜ', path: '/admin/withdrawals', icon: 'üí∞' },
                  { label: 'ÂÆ¢ÊúçÁÆ°ÁêÜ', path: '/admin/permissions', icon: 'üîë' },
                //  { label: 'ÈÄöÁü•ÁÆ°ÁêÜ', path: '/admin/notifications', icon: 'üîî' },
                //label: 'Êï∞ÊçÆÁÆ°ÁêÜ', path: '/admin/data-management', icon: 'üóÑÔ∏è' },
                  { label: 'APIÁõëÊéß', path: '/admin/api-monitor', icon: 'üì°' },
                  { label: 'APIÁä∂ÊÄÅ', path: '/admin/api-status', icon: 'üîç' },
                ];
              }
      default:
        return [];
    }
  };
  
  // Get user initials for avatar
  const getUserInitials = () => {
    switch(userRole) {
      case 'user': return 'Áî®';
      case 'player': return 'Èô™';
      case 'admin': return 'ÁÆ°';
      default: return 'Êú™';
    }
  };

  // Check if current path is active
  const isActivePath = (path: string) => {
    return location.pathname === path;
  };
  
  return (
     <header className={`border-b border-theme-border sticky top-0 z-10 bg-theme-surface`}>
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          {/* Logo */}
          <div className="flex items-center">
            <div className="text-theme-primary font-bold text-xl flex items-center">
              <img src="/favicon.png" alt="VITA Icon" className="w-8 h-8 mr-2" />
                     Vita
            </div>
          </div>
          
          {/* Navigation and User Menu */}
          {isAuthenticated && userRole ? (
            <div className="flex items-center space-x-6">
              {/* Role-specific Navigation */}
               <nav className="flex items-center space-x-8">
                 {getNavItems().map((item, index) => (
                   <Link 
                     key={index}
                     to={item.path}
                     className={cn(
                       "relative text-sm font-medium transition-all duration-300 flex items-center group",
                       isActivePath(item.path) 
                         ? "text-theme-primary" 
                         : "text-theme-text hover:text-theme-primary"
                     )}
                    >
                      {item.label}
                      {/* ‰∏ãÂàíÁ∫øÊåáÁ§∫Âô® */}
                      <span 
                        className={cn(
                          "absolute -bottom-4 left-0 h-0.5 bg-theme-primary transition-all duration-300 ease-out",
                          isActivePath(item.path) 
                            ? "w-full opacity-100" 
                            : "w-0 opacity-0 group-hover:w-full group-hover:opacity-100"
                        )}
                      />
                    </Link>
                 ))}
               </nav>
              
               {/* Removed mobile menu button as per user request */}
              
               {/* Theme Toggle Button */}
                {/* <NotificationDropdown /> */}
                <button 
                  onClick={() => setIsThemeMenuOpen(!isThemeMenuOpen)}
                  className="flex items-center justify-center w-10 h-10 rounded-full bg-theme-surface text-theme-text hover:bg-theme-primary/10 transition-colors focus:outline-none mr-2 border border-theme-border"
                  aria-label="Toggle theme"
                >
                  <i className="fa-solid fa-palette"></i>
                </button>
               
               {/* Theme Menu */}
               {isThemeMenuOpen && (
                  <div className="absolute right-0 top-full mt-1 w-80 bg-theme-surface rounded-lg shadow-lg border border-theme-border z-10 animate-in fade-in slide-in-from-top-5 duration-150">
                    <div className="p-4 border-b border-theme-border">
                     <h3 className="font-semibold text-theme-text text-sm">‰∏ªÈ¢òËÆæÁΩÆ</h3>
                   </div>
                   
                   <div className="p-4">
                     <h4 className="font-medium text-theme-text text-xs mb-3">È¢ÑËÆæ‰∏ªÈ¢ò</h4>
                      <div className="grid grid-cols-2 gap-2 mb-6">
                         {availableThemes.map(themeOption => (
                           <button
                             key={themeOption}
                             onClick={() => setThemeMode(themeOption)}
                              className={`p-2 rounded-lg text-sm font-medium transition-colors ${
                                lastPresetTheme === themeOption 
                                  ? 'bg-theme-primary/20 text-theme-primary' 
                                 : 'bg-theme-background text-theme-text hover:bg-theme-primary/10'
                             }`}
                           >
                             {themeOption === 'light' && 'ÊµÖËâ≤Ê®°Âºè'}
                             {themeOption === 'dark' && 'Ê∑±Ëâ≤Ê®°Âºè'}
                             {themeOption === 'cyberpunk' && 'ËµõÂçöÊúãÂÖã'}
                             {themeOption === 'pastel' && 'Ê∑°ÈõÖÈ£éÊ†º'}
                           </button>
                         ))}
                      </div>

                      {/* Â≠ó‰ΩìÂ§ßÂ∞èËÆæÁΩÆ */}
                      <div className="border-t border-theme-border pt-4">
                        <h4 className="font-medium text-theme-text text-xs mb-3 flex items-center">
                          <i className="fa-solid fa-font mr-2 text-theme-primary"></i>
                          Â≠ó‰ΩìÂ§ßÂ∞è
                        </h4>
                        <div className="space-y-2">
                          {availableFontSizes.map(fontSizeOption => (
                            <button
                              key={fontSizeOption}
                              onClick={() => setFontSizeMode(fontSizeOption)}
                              className={`w-full p-2.5 rounded-lg text-sm font-medium transition-all duration-200 flex items-center justify-between ${
                                fontSize === fontSizeOption 
                                  ? 'bg-theme-primary/20 text-theme-primary border border-theme-primary/30' 
                                  : 'bg-theme-background text-theme-text hover:bg-theme-primary/10 border border-transparent'
                              }`}
                            >
                              <span>
                                {fontSizeOption === 'small' && 'Â∞èÂè∑Â≠ó‰Ωì'}
                                {fontSizeOption === 'medium' && 'Ê†áÂáÜÂ≠ó‰Ωì'}
                                {fontSizeOption === 'large' && 'Â§ßÂè∑Â≠ó‰Ωì'}
                                {fontSizeOption === 'extra-large' && 'Ë∂ÖÂ§ßÂ≠ó‰Ωì'}
                              </span>
                              <span className="text-xs opacity-70">
                                {fontSizeOption === 'small' && '14px'}
                                {fontSizeOption === 'medium' && '16px'}
                                {fontSizeOption === 'large' && '18px'}
                                {fontSizeOption === 'extra-large' && '20px'}
                              </span>
                              {fontSize === fontSizeOption && (
                                <i className="fa-solid fa-check text-theme-primary ml-2"></i>
                              )}
                            </button>
                          ))}
                        </div>
                        

                      </div>
                        
                   </div>
                 </div>
               )}
               
               {/* User Avatar with Dropdown */}
               <div className="relative" ref={menuRef}>
                  <button 
                    onClick={() => setIsMenuOpen(!isMenuOpen)}
                    className="flex items-center justify-center w-10 h-10 rounded-full bg-theme-primary/10 text-theme-primary font-medium hover:bg-theme-primary/20 transition-colors focus:outline-none border-2 border-white shadow-sm"
                    aria-label="User menu"
                  >
                    {getUserInitials()}
                 </button>
                
                {/* Dropdown Menu */}
                {isMenuOpen && (
                  <div className="absolute right-0 mt-2 w-48 bg-theme-surface rounded-lg shadow-lg border border-theme-border z-20 animate-in fade-in slide-in-from-top-5 duration-150">
                    <div className="py-1">
                       <Link
                         to={userRole === 'user' ? '/user/profile' : userRole === 'player' ? '/player/profile' : '/admin/profile'}
                         className="block px-4 py-2 text-sm text-theme-text hover:bg-theme-primary/10 hover:text-theme-primary transition-colors"
                         onClick={() => setIsMenuOpen(false)}
                       >
                         <i className="fa-solid fa-user mr-2"></i>‰∏™‰∫∫‰∏ªÈ°µ
                       </Link>
                      <button
                        onClick={() => {
                          logout();
                          setIsMenuOpen(false);
                        }}
                        className="block w-full text-left px-4 py-2 text-sm text-theme-text hover:bg-theme-primary/10 hover:text-theme-primary transition-colors"
                      >
                        <i className="fa-solid fa-sign-out-alt mr-2"></i>ÈÄÄÂá∫ÁôªÂΩï
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          ) : (
            <div className="flex items-center space-x-4">
              <Link to="/login" className="text-sm text-theme-text hover:text-theme-primary transition-colors">
                ÁôªÂΩï
              </Link>
              <Link 
                to="/register" 
                className="px-3 py-1.5 bg-theme-primary text-white text-xs font-semibold rounded hover:bg-theme-primary/80 transition-colors"
              >
                Ê≥®ÂÜå
              </Link>
            </div>
          )}
        </div>
      </div>
    </header>
  );
}